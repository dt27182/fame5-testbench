package Cpu 
 
import Chisel._ 
import scala.collection.mutable.HashMap

class Cpu extends Module {
  val io = new Bundle { 
    val read_data = new DecoupledIO(UInt(width = 32))
    val read_addr = new DecoupledIO(Bits(width = 4)).flip()
  }

  val pc_reg = Reg(init = UInt(0,4))
  val pc_spec = UInt()
  pc_spec := pc_reg + UInt(1)
  val pc_plus4 = UInt()
  pc_plus4 := pc_reg + UInt(1)
  
  val imem = Module(new TICache())
  imem.io.req.valid := Bool(true)
  val imem_addr = Bits()
  imem_addr := pc_reg
  imem.io.req.bits := imem_addr
  
  val inst = Bits()
  inst := imem.io.resp

  val rs1 = Bits()
  val rs2 = Bits()
  val rd = Bits()
  val op = Bits()
  val imm = Bits()
  rs1 := inst(11,8)
  rs2 := inst(7,4)
  rd := inst(3,0)
  op := inst(14,12)
  imm := Cat(Bits(0,15), inst(31,15))
  
  val isJmp = Bool()
  isJmp := op === UInt(6)
  val isNotJmp = Bool()
  isNotJmp := ~(op === UInt(6))
  when(isNotJmp){
    pc_reg := pc_plus4
  }
  val jmpTarget = Bits()
  jmpTarget := imm(3,0)
  when(isJmp){
    pc_reg := jmpTarget
  }
  
  //val regfile = Module(new TransactionMem(16, 3, 3, Array(0,1,2), 2, 1, Array(0, 0), seqRead = true)(Bits(width = 32)))
  val regfile = Module(new TransactionMem(16, 3, 3, Array(0,1,2), 2, 1, Array(0, 0))(Bits(width = 32)))


  val rs1_data = UInt()
  val rs2_data = UInt()
  rs1_data := regfile.io.reads(0).dat
  regfile.io.reads(0).adr := rs1
  regfile.io.reads(0).is := Bool(true)
  rs2_data := regfile.io.reads(1).dat
  regfile.io.reads(1).adr := rs2
  regfile.io.reads(1).is := Bool(true)
  io.read_data.bits := regfile.io.reads(2).dat
  regfile.io.reads(2).adr := io.read_addr.bits
  regfile.io.reads(2).is := Bool(true)

  io.read_addr.ready := Bool(true)
  io.read_data.valid := io.read_addr.valid

  val operand1 = UInt()
  operand1 := rs1_data
  when(op === UInt(4)){
    operand1 := UInt(0)
  }
  val operand2 = UInt()
  operand2 := rs2_data
  when(op > UInt(1)){
    operand2 := imm
  }
  
  val adder_out = UInt()
  val subtract_out = UInt()
  adder_out := operand1 + operand2
  subtract_out := operand1 - operand2
  
  val adder_sel = Bool()
  val subtract_sel = Bool()
  adder_sel := (op === UInt(0)) || (op === UInt(2) || (op === UInt(4)))
  subtract_sel := (op === UInt(1)) || (op === UInt(3))

  regfile.io.writes(0).is := adder_sel
  regfile.io.writes(0).adr := rd
  regfile.io.writes(0).dat := adder_out
  regfile.io.writes(1).is := subtract_sel
  regfile.io.writes(1).adr := rd
  regfile.io.writes(1).dat := subtract_out

}

class CpuTests(c: Cpu) extends Tester(c, Array(c.io)) {
  defTests {
    val vars = new HashMap[Node, Node]()
    val ovars = new HashMap[Node, Node]()
    var all_correct = true
    
    
    //wait 10 non stall cycles for the processor to finish executing the test program   
    var count = 0
    while(count < 11){
      vars(c.io.read_addr.bits) = UInt(15)
      vars(c.io.read_addr.valid) = Bool(false)
      //vars(c.io.read_data.ready) = Bool(true)
      all_correct = step(vars, ovars) && all_correct
      if(ovars(c.io.read_addr.ready).name == "0x1"){
        count = count + 1
      }
    }
    
    //read out expected register values
    var inputDone = false
    var inputState = 0
    var outputDone = false
    var outputState = 0

    val inputAddrs = Array(0, 1, 2, 3, 4)
    val outputData = Array(2, 3, 5, 3, 3)
    
    def setInputs() = {
      vars(c.io.read_addr.bits) = UInt(inputAddrs(inputState))
      vars(c.io.read_addr.valid) = Bool(true)
      //vars(c.io.read_data.ready) = Bool(true)
    }
    def updateInputState() = {
      if(ovars(c.io.read_addr.ready).name == "0x1"){
        inputState = inputState + 1
      }
      if(inputState >= inputAddrs.length){
        inputDone = true
      }
    }
    def updateOutputState() = {
      if(ovars(c.io.read_data.valid).name == "0x1"){
        if(ovars(c.io.read_data.bits).name == "0x" + outputData(outputState)){
          outputState = outputState + 1
        } else {
          println("test #" + outputState + " failed")
          println("expected " + "0x" + outputData(outputState))
          println("received " + ovars(c.io.read_data.bits))
          Predef.assert(false)
        }
      }
      if(outputState >= outputData.length){
        outputDone = true
      }
    }
    
    while(!inputDone && !outputDone){
      setInputs()
      step(vars,ovars)
      updateInputState()
      updateOutputState()
    }
    
    true
  }
}

object Cpu {
  def main(args: Array[String]): Unit = {
    if(args(0) == "-ctest"){
      chiselMainTest(args.slice(1, args.length) ++ Array("--backend", "c", "--genHarness", "--compile", "--test", "--vcd", "--debug"), () => Module(new Cpu())) {
        c => new CpuTests(c) }
    } else if(args(0) == "-vbuild"){
      chiselMain(args.slice(1,args.length) ++ Array("--backend", "v"), () => Module(new Cpu()))
    } else if(args(0) == "-backannotation"){
      chiselMain(args.slice(1,args.length) ++ Array("--backend", "MyBackend.MyBackend"), () => Module(new Cpu()))
    }
  }
}
